generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  BARBER
  CLIENT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  ATTENDED
  NO_SHOW
  CANCELLED
}

enum ReminderChannel {
  NONE
  EMAIL
  WHATSAPP
  BOTH
}

model Service {
  id           String               @id @default(uuid())
  name         String
  description  String?
  price        Float
  duration     Int
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments AppointmentService[]
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  role               UserRole             @default(CLIENT)
  phone              String?
  notes              String?
  isBlocked          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  barber             Barber?
  clientAppointments Appointment[]        @relation("ClientAppointments")
  reminderChannel    ReminderChannel      @default(BOTH)
  createdByAdminId   String?
  createdByAdmin     User?                @relation("AdminCreatedUsers", fields: [createdByAdminId], references: [id], onDelete: Cascade)
  createdUsers       User[]               @relation("AdminCreatedUsers")
  personalInfo       PersonalInformation?
  sales              Sale[]
  financialRecords   FinancialRecord[]
  services           Service[]
  products           Product[]
  Notification       Notification[]

  referralCode    String?          @unique @default(cuid())
  referredBy      String?
  subscription    Subscription?
  referralsMade   Referral[]       @relation("Referrer") // pessoas que ele indicou
  referralsGot    Referral[]       @relation("Referee")
  referralPayouts ReferralPayout[]
}

model Barber {
  id           String              @id @default(uuid())
  commission   Float?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  availability AvailabilityBlock[]
}

model FinancialRecord {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String
  amount        Decimal      @db.Decimal(10, 2)
  description   String?
  date          DateTime     @db.Date
  category      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model AvailabilityBlock {
  id        String   @id @default(uuid())
  date      DateTime
  startTime String
  endTime   String
  reason    String?
  barberId  String
  barber    Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id         String        @id @default(uuid())
  name       String
  price      Float         @default(0.0)
  stock      Int
  stockValue Float?
  category   String?
  active     Boolean       @default(true)
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales      SaleProduct[]
}

model Sale {
  id           String        @id @default(uuid())
  userId       String
  date         DateTime      @default(now())
  total        Float
  clientName   String?
  quantities   Json
  sellingPrice Float?
  profit       Float         @default(0.0)
  netProfit    Float         @default(0.0)
  products     SaleProduct[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
  id              String               @id @default(uuid())
  date            DateTime             @db.Date
  startTime       String
  endTime         String
  status          AppointmentStatus    @default(SCHEDULED)
  reminderSent    Boolean              @default(false)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  clientId        String?
  clientName      String?
  phone           String?
  barberId        String
  barber          Barber               @relation(fields: [barberId], references: [id], onDelete: Cascade)
  client          User?                @relation("ClientAppointments", fields: [clientId], references: [id], onDelete: Cascade)
  services        AppointmentService[]
  serviceToken    String?
  financialRecord FinancialRecord?
}

model AppointmentService {
  appointmentId String
  serviceId     String
  assignedAt    DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([appointmentId, serviceId])
}

model SaleProduct {
  saleId    String
  productId String
  quantity  Int?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@id([saleId, productId])
}

model Notification {
  id     String   @id @default(uuid())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title  String
  body   String
  date   DateTime @default(now())
  read   Boolean  @default(false)
}

model PersonalInformation {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessname  String?
  daysworked    String?
  menssage      String?
  startTime     String?
  endTime       String?
  workDays      Int?
  availableDays Json?
  paymentMethod String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String
  price     Float
  startDate DateTime @default(now())
}

model PushSubscription {
  id           String   @id @default(uuid())
  userId       String   @unique
  subscription Json
  createdAt    DateTime @default(now())
}

model Referral {
  id            String    @id @default(uuid())
  referrerId    String
  refereeId     String
  active        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  activatedAt   DateTime?
  deactivatedAt DateTime?
  payoutPaid    Boolean   @default(false)
  payoutAmount  Decimal?  @db.Decimal(10, 2)
  referrer      User      @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referee       User      @relation("Referee", fields: [refereeId], references: [id], onDelete: Cascade)
}

model ReferralPayout {
  id         String    @id @default(uuid())
  referrerId String
  amount     Decimal   @db.Decimal(10, 2)
  status     String // PENDING | PAID | CANCELLED
  createdAt  DateTime  @default(now())
  paidAt     DateTime?
  operatorId String? // quem marcou como pago
  note       String?
  referrer   User      @relation(fields: [referrerId], references: [id], onDelete: Cascade)
}
